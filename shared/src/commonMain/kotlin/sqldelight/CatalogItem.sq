import kotlin.collections.List;


CREATE TABLE CatalogItem (
    id INTEGER UNIQUE NOT NULL PRIMARY KEY,
    label TEXT NOT NULL,
    type TEXT NOT NULL,
    weight INTEGER AS Int NOT NULL,
    imgUrl TEXT AS List<String> NOT NULL,
    price REAL NOT NULL,
    priceSale REAL NOT NULL,
    likes INTEGER AS Int NOT NULL,
    about TEXT NOT NULL,
    calorie TEXT NOT NULL,
    carbohydrates TEXT NOT NULL,
    fats TEXT NOT NULL,
    protein TEXT NOT NULL,
    productComposition TEXT NOT NULL
);

getAll:
SELECT * FROM CatalogItem;

getItemFromId:
SELECT * FROM CatalogItem
WHERE id = :id;

removeAllItems:
DELETE FROM CatalogItem;

insertItem:
INSERT OR REPLACE INTO CatalogItem(id,label,type,weight,imgUrl,price,priceSale,likes,about,productComposition,calorie,carbohydrates,fats,protein)
VALUES (:id,:label,:type,:weight,:imgUrl,:price,:priceSale,:likes,:about,:productComposition,:calorie,:carbohydrates,:fats,:protein);

getTypes:
SELECT DISTINCT type FROM CatalogItem;

--@Query("SELECT * FROM catalog")
 --   fun getAll(): List<CatalogItemDbEntity>

 --   @Query("DELETE FROM catalog")
   -- fun deleteTable()

--    @Query("SELECT * FROM catalog WHERE type LIKE :type AND name LIKE :query")
  --  fun getFromTypeAndSearch(type:String,query: String) : List<CatalogItemDbEntity>

    --@Query("SELECT weight FROM catalog WHERE id = :id")
    --fun getWeightFRomId(id: Int) : Int

    --@Query("SELECT price FROM catalog WHERE id = :id")
    --fun getPriceFRomId(id: Int) : Int

    --@Insert
    ---fun insert(item: CatalogItemDbEntity)

    --@Up-date
    --fun update(item: CatalogItemDbEntity)

    --@Delete
    --fun delete(item: CatalogItemDbEntity)-->